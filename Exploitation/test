import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;

public class test {
	public static void main(String[] args) {
		double pas = 0.1;
		try{InputStream ips = new FileInputStream("putty.txt");
		InputStreamReader ipsr = new InputStreamReader(ips);
		BufferedReader br = new BufferedReader(ipsr);
		String ligne;
		int numLigne = 0;
		int nombreDeLignes = 36;
		while ((ligne = br.readLine()) != null) {
			numLigne++;

		}
		
		
		int T = numLigne / nombreDeLignes;
		br.close();
		InputStream ips1 = new FileInputStream("putty.txt");
		InputStreamReader ipsr1 = new InputStreamReader(ips1);
		BufferedReader br1 = new BufferedReader(ipsr1);
		int[][] valeurs = new int[T][36];
		String ligne1;
		while ((ligne1 = br1.readLine()) != null) {
			int k = 0, p = 0;
			while (p != 36) {
				valeurs[k][p] = Integer.parseInt(ligne1);
				p++;
			}
			k++;
		}

		br1.close();
		
		// Normal stress : C1+C2 or C3+C4 or four
		// Shear on x-axis : C1-C2
		// Shear on y-axis : C3-C4
		// Cmes = - (Vout/Vin)*Cref
		// P= dL/L
		int Cref = 0;
		int Vin = 1;

		double[][][] capacites = new double[T][9][3];

		for (int i = 0; i < T; i++) {
			capacites[i][9][1] = -(Cref / Vin)
					* (valeurs[i][1] + valeurs[i][2]);
			capacites[i][9][2] = -(Cref / Vin)
					* (valeurs[i][7] - valeurs[i][8]);
			capacites[i][9][3] = -(Cref / Vin)
					* (valeurs[i][2] - valeurs[i][1]);

			capacites[i][8][1] = -(Cref / Vin)
					* (valeurs[i][3] + valeurs[i][4]);
			capacites[i][8][2] = -(Cref / Vin)
					* (valeurs[i][9] - valeurs[i][10]);
			capacites[i][8][3] = -(Cref / Vin)
					* (valeurs[i][4] - valeurs[i][3]);

			capacites[i][7][1] = -(Cref / Vin)
					* (valeurs[i][5] + valeurs[i][6]);
			capacites[i][7][2] = -(Cref / Vin)
					* (valeurs[i][11] - valeurs[i][12]);
			capacites[i][7][3] = -(Cref / Vin)
					* (valeurs[i][6] - valeurs[i][5]);

			capacites[i][6][1] = -(Cref / Vin)
					* (valeurs[i][13] + valeurs[i][14]);
			capacites[i][6][2] = -(Cref / Vin)
					* (valeurs[i][19] - valeurs[i][20]);
			capacites[i][6][3] = -(Cref / Vin)
					* (valeurs[i][14] - valeurs[i][13]);

			capacites[i][5][1] = -(Cref / Vin)
					* (valeurs[i][15] + valeurs[i][16]);
			capacites[i][5][2] = -(Cref / Vin)
					* (valeurs[i][21] - valeurs[i][22]);
			capacites[i][5][3] = -(Cref / Vin)
					* (valeurs[i][16] - valeurs[i][15]);

			capacites[i][4][1] = -(Cref / Vin)
					* (valeurs[i][17] + valeurs[i][18]);
			capacites[i][4][2] = -(Cref / Vin)
					* (valeurs[i][23] - valeurs[i][24]);
			capacites[i][4][3] = -(Cref / Vin)
					* (valeurs[i][18] - valeurs[i][17]);

			capacites[i][3][1] = -(Cref / Vin)
					* (valeurs[i][25] + valeurs[i][26]);
			capacites[i][3][2] = -(Cref / Vin)
					* (valeurs[i][31] - valeurs[i][32]);
			capacites[i][3][3] = -(Cref / Vin)
					* (valeurs[i][26] - valeurs[i][25]);

			capacites[i][2][1] = -(Cref / Vin)
					* (valeurs[i][27] + valeurs[i][28]);
			capacites[i][2][2] = -(Cref / Vin)
					* (valeurs[i][33] - valeurs[i][34]);
			capacites[i][2][3] = -(Cref / Vin)
					* (valeurs[i][28] - valeurs[i][27]);

			capacites[i][1][1] = -(Cref / Vin)
					* (valeurs[i][29] + valeurs[i][30]);
			capacites[i][1][2] = -(Cref / Vin)
					* (valeurs[i][35] - valeurs[i][36]);
			capacites[i][1][3] = -(Cref / Vin)
					* (valeurs[i][30] - valeurs[i][29]);
		}

		double[][][] elongation = new double[T][9][3];
		double etalonnage = 0;
		for (int k = 0; k < T; k++) {
			for (int l = 0; l < 9; l++) {
				for (int m = 0; m < 3; m++) {
					elongation[k][l][m] = etalonnage / capacites[k][l][m];
				}
			}
		}
		double[] temps = new double[T];
		for (int k = 0; k < T; k++) {
			temps[k] = k*pas;
		}
		

		for (int k = 0; k < 9; k++) {
			for (int p = 0; p < 3; p++) {
				Fenetre fen = new Fenetre(temps, elongation[k][p], k, p);
			}

		}
	
		}
		catch (Exception e) { 
			System.out.println(e.toString()); 
			} }
}
